name: Daily Data Pipeline

on:
  schedule:
    # Run daily at 2 AM EST (7 AM UTC)
    - cron: '0 7 * * *'
  workflow_dispatch:  # Allow manual trigger

# Needed for pushing changes back to repo
permissions:
  contents: write
  issues: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hour timeout for data update
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Need full history for git operations
        lfs: true  # Pull Git LFS files

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Pull Git LFS files
      run: |
        git lfs pull
        echo "Checking data files:"
        ls -lh data/*.parquet | head -5

    - name: Run daily data update
      env:
        USAJOBS_API_TOKEN: ${{ secrets.USAJOBS_API_TOKEN }}
      run: |
        cd update
        python update_all.py

  analyze-questionnaires:
    needs: update-data  # This job runs AFTER update-data completes successfully
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hour timeout for questionnaire analysis
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main  # Pull latest changes from update-data job
        lfs: true  # Pull Git LFS files

    - name: Pull latest changes and LFS files
      run: |
        git pull origin main
        git lfs pull
        echo "Verifying data files:"
        ls -lh data/*.parquet | head -5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Install Playwright
        pip install playwright
        playwright install chromium
        playwright install-deps

    - name: Install Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: 'latest'

    - name: Configure git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Run questionnaire analysis
      run: |
        cd questionnaires
        python run_analysis.py

    - name: Upload analysis artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: questionnaire-analysis
        path: |
          questionnaires/analysis/index.html
          questionnaires/questionnaire_links.csv

  push-changes:
    needs: [update-data, analyze-questionnaires]
    runs-on: ubuntu-latest
    if: success()  # Only run if both previous jobs succeeded
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
        lfs: true

    - name: Pull latest changes
      run: |
        git pull origin main
        git lfs pull

    - name: Push all changes
      run: |
        git push origin main

  notify-on-failure:
    needs: [update-data, analyze-questionnaires]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Daily Pipeline Failed - ${new Date().toISOString().split('T')[0]}`,
            body: `The daily data pipeline workflow failed. 
            
            [View the failed run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            Please check the logs for details.`,
            labels: ['bug', 'automated']
          };
          await github.rest.issues.create(issue);