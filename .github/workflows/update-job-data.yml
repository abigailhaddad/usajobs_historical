name: Update Job Data Weekly

on:
  schedule:
    # Run every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch: # Allow manual trigger

# Needed for pushing changes back to repo and creating PRs
permissions:
  contents: write
  pull-requests: write

jobs:
  update-data:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Need full history for git operations
        lfs: true  # Pull Git LFS files
        ref: main  # Always start from main
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
    
    - name: Create or switch to tracking-updates branch
      run: |
        # Fetch all branches
        git fetch origin
        
        # Always start from main for a clean state
        git checkout main
        git pull origin main
        
        # Create a fresh tracking-updates branch from main
        # This ensures we always have the latest code and data
        git checkout -B tracking-updates
        echo "Created fresh tracking-updates branch from main"
    
    - name: Pull Git LFS files
      run: |
        git lfs pull
        echo "Checking data files:"
        ls -lh data/*.parquet | head -5
    
    - name: Generate updated job data
      run: |
        cd tracking
        python generate_jobs_summary_dynamic.py
    
    - name: Run tracking site tests
      id: tracking_tests
      run: |
        cd tracking
        python test_tracking_artifacts.py
    
    - name: Commit and push to tracking-updates branch
      run: |
        # Check if there are changes
        if [ -n "$(git status --porcelain)" ]; then
          git add tracking/public/data/*
          git commit -m "Update tracking job data - $(date +'%Y-%m-%d')"
          git push -f origin tracking-updates
          echo "CHANGES_MADE=true" >> $GITHUB_ENV
        else
          echo "No changes to commit"
          echo "CHANGES_MADE=false" >> $GITHUB_ENV
        fi
    
    - name: Create Pull Request
      if: env.CHANGES_MADE == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if PR already exists
        PR_EXISTS=$(gh pr list --base main --head tracking-updates --state open --json number --jq length)
        
        if [ "$PR_EXISTS" -eq "0" ]; then
          echo "Creating new PR..."
          gh pr create \
            --base main \
            --head tracking-updates \
            --title "Weekly tracking data update - $(date +'%Y-%m-%d')" \
            --body "Automated weekly tracking data update"
        else
          echo "PR already exists, skipping creation"
        fi
    
    - name: Auto-merge PR if tests pass
      if: env.CHANGES_MADE == 'true' && steps.tracking_tests.outcome == 'success'
      run: |
        # Wait a moment for PR to be created
        sleep 10
        
        # Find the PR number
        PR_NUMBER=$(gh pr list --base main --head tracking-updates --json number --jq '.[0].number')
        
        if [ -n "$PR_NUMBER" ]; then
          echo "Auto-merging PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --merge --auto
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-prod:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && needs.update-data.result == 'success')
    needs: update-data
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tracking site tests
      id: tracking_tests
      run: |
        cd tracking
        python test_tracking_artifacts.py
    
    - name: Push to prod-tracking if tests pass
      if: steps.tracking_tests.outcome == 'success'
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Create or update prod-tracking branch
        git checkout -B prod-tracking
        git push -f origin prod-tracking
        
        echo "âœ… Deployed to prod-tracking branch"